def UpperBound(nums,target):
    def UpperBound(nums,target):
        low=0
        high=len(nums)-1

        while low<=high:

            mid=(low+high)//2
            if nums[mid]<=target:
                low=mid+1
            else:
                high=mid-1
        if 0<=high<len(nums) and nums[high]==target:
            return high
        return -1

    def LowerBound(nums,target):
        low=0
        high=len(nums)-1

        while low<=high:
            mid=(low+high)//2
            if nums[mid]>=target:
                high=mid-1
            else:
                low=mid+1
        if 0<=low<len(nums) and nums[low]==target:
            return low
        return -1

    return [LowerBound(nums,target),UpperBound(nums,target)]


########################################################################################################
########################################################################################################

# Approach using bisect method ::


import bisect
def searchRange(self, nums: List[int], target: int) -> List[int]:
    if len(nums)==0:
        return [-1,-1]
    left=bisect.bisect_left(nums,target)
    if left<len(nums) and nums[left]==target:
        return [left,bisect.bisect_right(nums,target)-1]

    return [-1,-1]